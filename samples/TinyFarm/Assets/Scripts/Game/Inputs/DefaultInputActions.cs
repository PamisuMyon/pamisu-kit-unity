//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Game/Inputs/DefaultInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Inputs
{
    public partial class @DefaultInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputActions"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""203fa56d-9ef8-4fb5-8f14-11663532dfe7"",
            ""actions"": [
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""5d274d19-6554-40bd-9a93-028f31737cca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CursorConfirm"",
                    ""type"": ""Button"",
                    ""id"": ""84fc90de-f56e-4795-aaa6-a8bf2fdaca28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorCancel"",
                    ""type"": ""Button"",
                    ""id"": ""53c72e68-2310-4d99-b1dc-f38583412b04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""Button"",
                    ""id"": ""f1e6b543-51a8-4ad1-82cf-652095082aec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e820866-1e91-40fb-99e8-1b75eba58be8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e52601e-7969-4a5d-9145-2117c7e273c6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorConfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f08709f-f32e-4d13-a20b-01d5a359a79f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fe2ec7f-6315-4b5a-9b27-28e0b1d96415"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Game
            m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
            m_Game_CursorPosition = m_Game.FindAction("CursorPosition", throwIfNotFound: true);
            m_Game_CursorConfirm = m_Game.FindAction("CursorConfirm", throwIfNotFound: true);
            m_Game_CursorCancel = m_Game.FindAction("CursorCancel", throwIfNotFound: true);
            m_Game_ToggleInventory = m_Game.FindAction("ToggleInventory", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Game
        private readonly InputActionMap m_Game;
        private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
        private readonly InputAction m_Game_CursorPosition;
        private readonly InputAction m_Game_CursorConfirm;
        private readonly InputAction m_Game_CursorCancel;
        private readonly InputAction m_Game_ToggleInventory;
        public struct GameActions
        {
            private @DefaultInputActions m_Wrapper;
            public GameActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @CursorPosition => m_Wrapper.m_Game_CursorPosition;
            public InputAction @CursorConfirm => m_Wrapper.m_Game_CursorConfirm;
            public InputAction @CursorCancel => m_Wrapper.m_Game_CursorCancel;
            public InputAction @ToggleInventory => m_Wrapper.m_Game_ToggleInventory;
            public InputActionMap Get() { return m_Wrapper.m_Game; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
            public void AddCallbacks(IGameActions instance)
            {
                if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
                @CursorConfirm.started += instance.OnCursorConfirm;
                @CursorConfirm.performed += instance.OnCursorConfirm;
                @CursorConfirm.canceled += instance.OnCursorConfirm;
                @CursorCancel.started += instance.OnCursorCancel;
                @CursorCancel.performed += instance.OnCursorCancel;
                @CursorCancel.canceled += instance.OnCursorCancel;
                @ToggleInventory.started += instance.OnToggleInventory;
                @ToggleInventory.performed += instance.OnToggleInventory;
                @ToggleInventory.canceled += instance.OnToggleInventory;
            }

            private void UnregisterCallbacks(IGameActions instance)
            {
                @CursorPosition.started -= instance.OnCursorPosition;
                @CursorPosition.performed -= instance.OnCursorPosition;
                @CursorPosition.canceled -= instance.OnCursorPosition;
                @CursorConfirm.started -= instance.OnCursorConfirm;
                @CursorConfirm.performed -= instance.OnCursorConfirm;
                @CursorConfirm.canceled -= instance.OnCursorConfirm;
                @CursorCancel.started -= instance.OnCursorCancel;
                @CursorCancel.performed -= instance.OnCursorCancel;
                @CursorCancel.canceled -= instance.OnCursorCancel;
                @ToggleInventory.started -= instance.OnToggleInventory;
                @ToggleInventory.performed -= instance.OnToggleInventory;
                @ToggleInventory.canceled -= instance.OnToggleInventory;
            }

            public void RemoveCallbacks(IGameActions instance)
            {
                if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameActions instance)
            {
                foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameActions @Game => new GameActions(this);
        public interface IGameActions
        {
            void OnCursorPosition(InputAction.CallbackContext context);
            void OnCursorConfirm(InputAction.CallbackContext context);
            void OnCursorCancel(InputAction.CallbackContext context);
            void OnToggleInventory(InputAction.CallbackContext context);
        }
    }
}
