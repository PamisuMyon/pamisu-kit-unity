<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CliWrap</name>
    </assembly>
    <members>
        <member name="T:CliWrap.Buffered.BufferedCommandExtensions">
            <summary>
            Buffered execution model.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            The result of this execution contains the standard output and standard error streams buffered in-memory as strings.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            The result of this execution contains the standard output and standard error streams buffered in-memory as strings.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            The result of this execution contains the standard output and standard error streams buffered in-memory as strings.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="T:CliWrap.Buffered.BufferedCommandResult">
            <summary>
            Result of command execution, with buffered data from standard output and standard error streams.
            </summary>
        </member>
        <member name="P:CliWrap.Buffered.BufferedCommandResult.StandardOutput">
            <summary>
            Standard output data produced by the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.Buffered.BufferedCommandResult.StandardError">
            <summary>
            Standard error data produced by the underlying process.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandResult.#ctor(System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Buffered.BufferedCommandResult"/>.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.ArgumentsBuilder">
            <summary>
            Builder that helps generate well-formed arguments string.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.String,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.String)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.IFormatProvider,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            The value is converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable)">
            <summary>
            Adds the specified value to the list of arguments.
            The value is converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.IFormatProvider,System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            The values are converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable})">
            <summary>
            Adds the specified values to the list of arguments.
            The values are converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Build">
            <summary>
            Builds the resulting arguments string.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.CredentialsBuilder">
            <summary>
            Builder that helps configure user credentials.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.SetDomain(System.String)">
            <summary>
            Sets the active directory domain to the specified value.
            </summary>
            <remarks>Supported only on Windows.</remarks>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.SetUserName(System.String)">
            <summary>
            Sets the user name to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.SetPassword(System.String)">
            <summary>
            Sets the user password to the specified value.
            </summary>
            <remarks>Supported only on Windows.</remarks>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.Build">
            <summary>
            Builds the resulting credentials.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.EnvironmentVariablesBuilder">
            <summary>
            Builder that helps configure environment variables.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.String,System.String)">
            <summary>
            Sets an environment variable with the specified name to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets multiple environment variables from the specified sequence of key-value pairs.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets multiple environment variables from the specified dictionary.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Build">
            <summary>
            Builds the resulting environment variables.
            </summary>
        </member>
        <member name="T:CliWrap.Cli">
            <summary>
            Main entry point for creating new commands.
            </summary>
        </member>
        <member name="M:CliWrap.Cli.Wrap(System.String)">
            <summary>
            Creates a new command that targets the specified command line executable, batch file, or script.
            </summary>
        </member>
        <member name="T:CliWrap.Command">
            <summary>
            Encapsulates instructions for running a process.
            </summary>
        </member>
        <member name="P:CliWrap.Command.TargetFilePath">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.Arguments">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.WorkingDirPath">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.Credentials">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.EnvironmentVariables">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.Validation">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.StandardInputPipe">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.StandardOutputPipe">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.StandardErrorPipe">
            <inheritdoc />
        </member>
        <member name="M:CliWrap.Command.#ctor(System.String,System.String,System.String,CliWrap.Credentials,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},CliWrap.CommandResultValidation,CliWrap.PipeSource,CliWrap.PipeTarget,CliWrap.PipeTarget)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Command"/>.
            </summary>
        </member>
        <member name="M:CliWrap.Command.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Command"/>.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.String)">
            <summary>
            Creates a copy of this command, setting the arguments to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a copy of this command, setting the arguments to the value obtained by formatting the specified enumeration.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a copy of this command, setting the arguments to the value obtained by formatting the specified enumeration.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Action{CliWrap.Builders.ArgumentsBuilder})">
            <summary>
            Creates a copy of this command, setting the arguments to the value configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithWorkingDirectory(System.String)">
            <summary>
            Creates a copy of this command, setting the working directory path to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithCredentials(CliWrap.Credentials)">
            <summary>
            Creates a copy of this command, setting the credentials to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithCredentials(System.Action{CliWrap.Builders.CredentialsBuilder})">
            <summary>
            Creates a copy of this command, setting the credentials to the value configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithEnvironmentVariables(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a copy of this command, setting the environment variables to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithEnvironmentVariables(System.Action{CliWrap.Builders.EnvironmentVariablesBuilder})">
            <summary>
            Creates a copy of this command, setting the environment variables to the value configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithValidation(CliWrap.CommandResultValidation)">
            <summary>
            Creates a copy of this command, setting the validation options to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardInputPipe(CliWrap.PipeSource)">
            <summary>
            Creates a copy of this command, setting the standard input pipe to the specified source.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardOutputPipe(CliWrap.PipeTarget)">
            <summary>
            Creates a copy of this command, setting the standard output pipe to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardErrorPipe(CliWrap.PipeTarget)">
            <summary>
            Creates a copy of this command, setting the standard error pipe to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Command.ToString">
            <inheritdoc />
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,CliWrap.PipeTarget)">
            <summary>
            Creates a new command that pipes its standard output to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.IO.Stream)">
            <summary>
            Creates a new command that pipes its standard output to a stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Text.StringBuilder)">
            <summary>
            Creates a new command that pipes its standard output to a string builder.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Action{System.String})">
            <summary>
            Creates a new command that pipes its standard output line-by-line to a delegate.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Creates a new command that pipes its standard output line-by-line to a delegate.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{CliWrap.PipeTarget,CliWrap.PipeTarget})">
            <summary>
            Creates a new command that pipes its standard output and standard error to separate targets.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.IO.Stream,System.IO.Stream})">
            <summary>
            Creates a new command that pipes its standard output and standard error to separate streams.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Text.StringBuilder,System.Text.StringBuilder})">
            <summary>
            Creates a new command that pipes its standard output and standard error to separate string builders.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Action{System.String},System.Action{System.String}})">
            <summary>
            Creates a new command that pipes its standard output and standard error line-by-line to separate delegates.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task}})">
            <summary>
            Creates a new command that pipes its standard output and standard error line-by-line to separate delegates.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.PipeSource,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified source.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.IO.Stream,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from a stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.ReadOnlyMemory{System.Byte},CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from memory.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.Byte[],CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from a byte array.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.String,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from a string.
            Uses <see cref="P:System.Console.InputEncoding"/> to encode the string.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the standard output of another command.
            </summary>
        </member>
        <member name="T:CliWrap.CommandResult">
            <summary>
            Result of command execution.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.ExitCode">
            <summary>
            Exit code set by the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.StartTime">
            <summary>
            Point in time at which the command has started executing.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.ExitTime">
            <summary>
            Point in time at which the command has finished executing.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.RunTime">
            <summary>
            Total duration of the execution.
            </summary>
        </member>
        <member name="M:CliWrap.CommandResult.#ctor(System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.CommandResult"/>.
            </summary>
        </member>
        <member name="T:CliWrap.CommandResultValidation">
            <summary>
            Strategy used for validating the result of command execution.
            </summary>
        </member>
        <member name="F:CliWrap.CommandResultValidation.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:CliWrap.CommandResultValidation.ZeroExitCode">
            <summary>
            Ensure that the command returned a zero exit code.
            </summary>
        </member>
        <member name="T:CliWrap.CommandTask`1">
            <summary>
            Represents an asynchronous execution of a command.
            </summary>
        </member>
        <member name="P:CliWrap.CommandTask`1.Task">
            <summary>
            Inner task.
            </summary>
        </member>
        <member name="P:CliWrap.CommandTask`1.ProcessId">
            <summary>
            Underlying process ID.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.#ctor(System.Threading.Tasks.Task{`0},System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.CommandTask`1"/>.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.Select``1(System.Func{`0,``0})">
            <summary>
            Lazily maps the result of the task using the specified transform.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.GetAwaiter">
            <summary>
            Gets the awaiter of the inner task.
            Used to facilitate async/await expressions on this object.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.Dispose">
            <summary>
            Disposes the inner task.
            There is no need to call this manually, unless you are not planning to await the task.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.op_Implicit(CliWrap.CommandTask{`0})~System.Threading.Tasks.Task{`0}">
            <summary>
            Casts a command task into a regular task.
            </summary>
        </member>
        <member name="T:CliWrap.Credentials">
            <summary>
            User credentials used for running a process.
            </summary>
        </member>
        <member name="P:CliWrap.Credentials.Domain">
            <summary>
            Active directory domain.
            </summary>
            <remarks>Supported only on Windows.</remarks>
        </member>
        <member name="P:CliWrap.Credentials.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CliWrap.Credentials.Password">
            <summary>
            User password.
            </summary>
            <remarks>Supported only on Windows.</remarks>
        </member>
        <member name="M:CliWrap.Credentials.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Credentials"/>.
            </summary>
        </member>
        <member name="P:CliWrap.Credentials.Default">
            <summary>
            Empty credentials.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.CommandEvent">
            <summary>
            <p>
                Abstract event produced by a command.
                Use pattern matching to handle specific instances of this type.
            </p>
            <p>
                Can be either one of the following:
                <list type="bullet">
                    <item><see cref="T:CliWrap.EventStream.StartedCommandEvent"/></item>
                    <item><see cref="T:CliWrap.EventStream.StandardOutputCommandEvent"/></item>
                    <item><see cref="T:CliWrap.EventStream.StandardErrorCommandEvent"/></item>
                    <item><see cref="T:CliWrap.EventStream.ExitedCommandEvent"/></item>
                </list>
            </p>
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.StartedCommandEvent">
            <summary>
            Event triggered when the command starts executing.
            May only appear once in an event stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StartedCommandEvent.ProcessId">
            <summary>
            Underlying process ID.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StartedCommandEvent.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StartedCommandEvent"/>.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StartedCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.StandardOutputCommandEvent">
            <summary>
            Event triggered when the underlying process prints a line of text to the standard output stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StandardOutputCommandEvent.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardOutputCommandEvent.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StandardOutputCommandEvent"/>.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardOutputCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.StandardErrorCommandEvent">
            <summary>
            Event triggered when the underlying process prints a line of text to the standard error stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StandardErrorCommandEvent.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardErrorCommandEvent.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StandardErrorCommandEvent"/>.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardErrorCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.ExitedCommandEvent">
            <summary>
            Event triggered when the command finishes executing.
            May only appear once in an event stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.ExitedCommandEvent.ExitCode">
            <summary>
            Exit code set by the underlying process.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.ExitedCommandEvent.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.ExitedCommandEvent"/>.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.ExitedCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.EventStreamCommandExtensions">
            <summary>
            Event stream execution model.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an asynchronous (pull-based) event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent"/>.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an asynchronous (pull-based) event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent"/>.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an asynchronous (pull-based) event stream.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent"/>.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an observable (push-based) event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent"/>.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an observable (push-based) event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent"/>.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an observable (push-based) event stream.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent"/>.
            </remarks>
        </member>
        <member name="T:CliWrap.Exceptions.CliWrapException">
            <summary>
            Parent class for exceptions thrown by <see cref="N:CliWrap"/>.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CliWrapException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CliWrapException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:CliWrap.Exceptions.CommandExecutionException">
            <summary>
            Exception thrown when the command fails to execute correctly.
            </summary>
        </member>
        <member name="P:CliWrap.Exceptions.CommandExecutionException.Command">
            <summary>
            Command that triggered the exception.
            </summary>
        </member>
        <member name="P:CliWrap.Exceptions.CommandExecutionException.ExitCode">
            <summary>
            Exit code returned by the process.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CommandExecutionException.#ctor(CliWrap.ICommandConfiguration,System.Int32,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CommandExecutionException"/>.
            </summary>
        </member>
        <member name="T:CliWrap.ICommandConfiguration">
            <summary>
            Configuration of a command.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.TargetFilePath">
            <summary>
            File path of the executable, batch file, or script, that this command runs.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.Arguments">
            <summary>
            Arguments passed on the command line.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.WorkingDirPath">
            <summary>
            Working directory path set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.Credentials">
            <summary>
            User credentials set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.EnvironmentVariables">
            <summary>
            Environment variables set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.Validation">
            <summary>
            Configured result validation strategy.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.StandardInputPipe">
            <summary>
            Configured standard input pipe source.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.StandardOutputPipe">
            <summary>
            Configured standard output pipe target.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.StandardErrorPipe">
            <summary>
            Configured standard error pipe target.
            </summary>
        </member>
        <member name="T:CliWrap.PipeSource">
            <summary>
            Abstraction that represents an inwards-facing pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the binary content pushed to the pipe into the destination stream.
            Destination stream represents the process's standard input stream.
            </summary>
        </member>
        <member name="P:CliWrap.PipeSource.Null">
            <summary>
            Pipe source that does not provide any data.
            Logical equivalent to /dev/null.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.Create(System.Func{System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates an anonymous pipe source with the <see cref="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified asynchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.Create(System.Action{System.IO.Stream})">
            <summary>
            Creates an anonymous pipe source with the <see cref="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified synchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a pipe source that reads from a stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromStream(System.IO.Stream)">
            <summary>
            Creates a pipe source that reads from a stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromFile(System.String)">
            <summary>
            Creates a pipe source that reads from a file.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromMemory(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a pipe source that reads from memory.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromBytes(System.Byte[])">
            <summary>
            Creates a pipe source that reads from a byte array.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromString(System.String,System.Text.Encoding)">
            <summary>
            Creates a pipe source that reads from a string.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromString(System.String)">
            <summary>
            Creates a pipe source that reads from a string.
            Uses <see cref="P:System.Console.InputEncoding"/> to encode the string.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromCommand(CliWrap.Command)">
            <summary>
            Creates a pipe source that reads from the standard output of a command.
            </summary>
        </member>
        <member name="T:CliWrap.PipeTarget">
            <summary>
            Abstraction that represents an outwards-facing pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the binary content from the origin stream and pushes it into the pipe.
            Origin stream represents the process's standard output or standard error stream.
            </summary>
        </member>
        <member name="P:CliWrap.PipeTarget.Null">
            <summary>
            Pipe target that discards all data.
            Logical equivalent to /dev/null.
            </summary>
            <remarks>
            Using this target results in the corresponding stream (standard output or standard error)
            not being opened for the underlying process at all.
            In the vast majority of cases, this behavior should be functionally equivalent to piping
            to a null stream, but without the performance overhead of consuming and discarding unneeded data.
            This may be undesirable in certain situations — in which case it's recommended to pipe to a
            null stream explicitly using <see cref="M:CliWrap.PipeTarget.ToStream(System.IO.Stream)" /> with <see cref="F:System.IO.Stream.Null" />.
            </remarks>
        </member>
        <member name="M:CliWrap.PipeTarget.Create(System.Func{System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates an anonymous pipe target with the <see cref="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified asynchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Create(System.Action{System.IO.Stream})">
            <summary>
            Creates an anonymous pipe target with the <see cref="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified synchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a pipe target that writes to a stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStream(System.IO.Stream)">
            <summary>
            Creates a pipe target that writes to a stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToFile(System.String)">
            <summary>
            Creates a pipe target that writes to a file.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStringBuilder(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Creates a pipe target that writes to a string builder.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Creates a pipe target that writes to a string builder.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Func{System.String,System.Threading.Tasks.Task},System.Text.Encoding)">
            <summary>
            Creates a pipe target that invokes an asynchronous delegate on every line written.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Creates a pipe target that invokes an asynchronous delegate on every line written.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Action{System.String},System.Text.Encoding)">
            <summary>
            Creates a pipe target that invokes a synchronous delegate on every line written.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Action{System.String})">
            <summary>
            Creates a pipe target that invokes a synchronous delegate on every line written.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Merge(System.Collections.Generic.IEnumerable{CliWrap.PipeTarget})">
            <summary>
            Creates a pipe target that replicates data over multiple inner targets.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Merge(CliWrap.PipeTarget[])">
            <summary>
            Creates a pipe target that replicates data over multiple inner targets.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
    </members>
</doc>
